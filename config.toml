[websocket]
# dolphin 对外提供websocket连接服务的地址
listen = "127.0.0.1:8080"
read_buf_size = 1024
write_buf_size = 1204
expvar = "/debug/vars"
grpc_listen = "127.0.0.1:41050"

[websocket.tls]
enabled = false
http_redirect = ":80"
cert_file = "/path/to/certfile"
key_file = "/path/to/keyfile"

# 以下设置将优先于cert file 和key file
[websocket.tls.autocert]
#Location of certificates.
cert_cache = "/etc/letsencrypt/live/your.domain.here"

# Contact address for this installation. LetsEncrypt will send
# messages to this address in case of problems. Replace with your
# own address or remove this line.
email = "noreply@example.com"

# Domains served. Replace with your own domain name.
domains = ["whatever.example.com"]
##################################################################################################
[cluster]
# 当前自身节点的名称
self = ""
[cluster.connection]
# net/rpc 客户端连接超时时间
dial_timeout = "5s"
# 以下四个参数设置 回退算法的参数值
max_delay = "1m"
base_delay = "1s"
factor = 1.6
jitter = 0.2
# 是否启用超时机制的请求
disable_request_timeout = false
# 超时时长
request_wait_after = "1m"

[[cluster.nodes]]
name = "node1"
address = "127.0.0.1:40051"

[[cluster.nodes]]
name = "node2"
address = "127.0.0.1:40052"

[[cluster.nodes]]
name = "node3"
address = "127.0.0.1:40053"

[cluster.failover]
# 是否启用容错
enabled = true
# 心跳间隔时间
# 一个心跳周期到达时维持两种关系：1、主节点向从节点发送ping心跳检测；2、发送主节点投票选举
# 心跳间隔规则：1、字符串；2、ms后缀表示毫秒，s后缀表示秒，m后缀表示分。心跳是毫秒级的，因此常用ms后缀
heartbeat = "100ms"
# 在n个心跳周期之后如果仍然没可用的主节点，将发起主节点选举
vote_after = 8
# 在n个心跳周期之后，节点仍然没有正常响应，将视作该节点不可用
node_fail_after = 16
##################################################################################################
[kafka]
brokers = ["127.0.0.1:9092"]
waitWindow = "2s"
consumeGroup = "dolphin-grp"
minBytes = 1000
maxBytes = 1000000
startOffset = 0
##################################################################################################
[[plugins]]
enabled = false
name = "auth"
server_addr = "127.0.0.1:30060"

[[plugins]]
enabled = false
name = "rate limit"
server_addr = "127.0.0.1:30061"
